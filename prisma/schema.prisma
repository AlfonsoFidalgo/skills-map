// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for storing LinkedIn user data
model User {
  id                   String        @id @default(uuid())
  name                 String?
  firstName            String?
  lastName             String?
  email                String?       @unique
  emailVerified        DateTime?
  location             String?
  title                String?
  image                String?
  linkedInId           String?       @unique
  industryId           String?
  industry             Industry?     @relation(fields: [industryId], references: [id], onDelete: SetNull)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  accounts             Account[]
  sessions             Session[]
  givenEndorsements    Endorsement[] @relation("EndorserUser")
  receivedEndorsements Endorsement[] @relation("EndorseeUser")

  @@index([industryId])
}

// Account model for storing OAuth provider details
model Account {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

// Session model (optional for JWT, but useful if you want to persist sessions)
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// VerificationToken model (optional for email verification)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Industry {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  skills      Skill[]
}

model Endorsement {
  id         String   @id @default(uuid())
  endorseeId String
  endorsee   User     @relation("EndorseeUser", fields: [endorseeId], references: [id], onDelete: Cascade)
  skillId    String
  skill      Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  endorserId String
  endorser   User     @relation("EndorserUser", fields: [endorserId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([endorseeId, skillId, endorserId])
  @@index([endorseeId])
  @@index([endorserId])
  @@index([skillId])
}

model Skill {
  id           String        @id @default(uuid())
  name         String        @unique
  description  String?
  industryId   String
  industry     Industry      @relation(fields: [industryId], references: [id], onDelete: Cascade)
  endorsements Endorsement[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([industryId])
}
